[
    {
        "id": "d4af305b.2ea44",
        "type": "tab",
        "label": "PIB Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e7f7d67f.1a41a8",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "SPO Notification Listener",
        "info": "",
        "x": 150,
        "y": 380,
        "wires": []
    },
    {
        "id": "82805e55.e961b",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "Version & Health-check",
        "info": "",
        "x": 140,
        "y": 620,
        "wires": []
    },
    {
        "id": "6bee0267.d0d8ec",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/version",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 660,
        "wires": [
            [
                "11327176.20e07f"
            ]
        ]
    },
    {
        "id": "346c6a76.9caae6",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 660,
        "wires": []
    },
    {
        "id": "11327176.20e07f",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "create version details",
        "func": "pjson = context.global.get('PACKAGE_JSON')\n\n// flow details\nvar flow = {\n    name: pjson.name,\n    version: pjson.version,\n    description: pjson.description\n};\n\nmsg.payload.flow = flow;\n\n// input logic details\nmsg.payload.integration = context.global.get('INTEGRATION').getVersion();\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 660,
        "wires": [
            [
                "346c6a76.9caae6"
            ]
        ]
    },
    {
        "id": "477f00a9.e1bb2",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "aa9f30a9.a0c99"
            ]
        ]
    },
    {
        "id": "5a323ae1.505384",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "log details",
        "func": "pjson = context.global.get('PACKAGE_JSON');\n\nnode.warn(pjson.name + \" has started.\");\n\n// log package.json details\nnode.log(\"Application: \" + pjson.name + \" \" + pjson.version);\nnode.log(\"License: \" + pjson.license);\n\n// log credentials\nnode.log(\"SPO Tenant: \" + env.get(\"SPO_TENANT\"));\nnode.log(\"SPO URL: \" + env.get(\"SPO_URL\"));\nnode.log(\"SPO Workspace ID: \" + env.get(\"SPO_WORKSPACE_ID\"));\n\n// log input logic details\nintegrationVersion = context.global.get('INTEGRATION').getVersion();\nnode.log(\"Integration Name: \" + integrationVersion.name + \" \" + integrationVersion.versionNumber);\nnode.log(\"Integration Location: \" + env.get(\"INTEGRATION_LOCATION\"));\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "17d91402.4fc00c",
        "type": "inject",
        "z": "d4af305b.2ea44",
        "name": "start-up",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 100,
        "y": 780,
        "wires": [
            [
                "5a323ae1.505384"
            ]
        ]
    },
    {
        "id": "aa9f30a9.a0c99",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "status",
        "func": "msg.payload.status = 'UP';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 700,
        "wires": [
            [
                "11327176.20e07f"
            ]
        ]
    },
    {
        "id": "4f40ddc3.c7e974",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "Exception Handling",
        "info": "",
        "x": 130,
        "y": 1740,
        "wires": []
    },
    {
        "id": "c480a3ac.02e3c",
        "type": "catch",
        "z": "d4af305b.2ea44",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1780,
        "wires": [
            [
                "6a76d426.aa179c"
            ]
        ]
    },
    {
        "id": "6a76d426.aa179c",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "log error",
        "func": "var errorMsg = \"\";\n\nerrorMsg += \"An error has occured:\\n\";\nerrorMsg += \"\\n\";\nerrorMsg += \"Node ID: \" + msg.error.source.id + \"\\n\";\nerrorMsg += \"Node Type: \" + msg.error.source.type + \"\\n\";\nerrorMsg += \"Node Name: \" + msg.error.source.name + \"\\n\";\nerrorMsg += \"\\n\";\nerrorMsg += \"Error Message:\\n\";\nerrorMsg += msg.error.message + \"\\n\";\n\nnode.error(errorMsg);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "e87f497a.fb0198",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Integration: processJob",
        "func": "\n// get input logic\nvar integration = context.global.get('INTEGRATION');\n\n// get jobs caches\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// process job\nnode.log(\"Process job: \" + msg.job.jobId);\n\n// set job#s storage dir\nmsg.job.storageFolder = msg.job.jobId + \"/\";\n\nintegration.processJob(msg.job,msg.mediaList)\n.then(\n    result => {\n        msg.binderySignatures = result.binderySignatures\n        msg.assemblerTask = result.assemblerTask;\n    \n        if(msg.binderySignatures !== null) {\n            node.log(\"BinderySignatures have been created for job \" + msg.job.jobId);\n            processedJobs[msg.job.jobId].audit.push(\n                {\n                    type : \"info\",\n                    on   : Date.now(),\n                    msg  : \"A bindery signature has been created.\"\n                }  \n            );\n            node.send([msg, null]);\n        \n        } \n        \n        else if (msg.assemblerTask !== null) {\n            node.log(\"AssemblerTask has been created for job \" + msg.job.jobId);\n            processedJobs[msg.job.jobId].audit.push(\n                {\n                    type : \"info\",\n                    on   : Date.now(),\n                    msg  : \"Assembler task has been created.\"\n                }  \n            );\n            node.send([null, msg]);\n        } \n        \n        else {\n            processedJobs[msg.job.jobId].status = \"error\";\n            processedJobs[msg.job.jobId].audit.push(\n                {\n                    type : \"error\",\n                    on   : Date.now(),\n                    msg  : \"Job has invalid data format.\"\n                }  \n            );            \n            throw new Error(\"Invalid result for job \" + msg.job.jobId)\n        }\n    }\n)\n.catch(\n    errorMsg => {\n        processedJobs[msg.job.jobId].status = \"error\";\n        processedJobs[msg.job.jobId].audit.push(\n            {\n                type : \"error\",\n                on   : Date.now(),\n                msg  : errorMsg\n            }  \n        );\n        \n        node.error(errorMsg)\n    }\n);",
        "outputs": 2,
        "noerr": 0,
        "x": 1190,
        "y": 140,
        "wires": [
            [
                "4aea9cdd.9cd1a4"
            ],
            [
                "8609f832.259ad8"
            ]
        ]
    },
    {
        "id": "5172bc7b.cdc624",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Integration: extractJobs",
        "func": "//get Caches\nvar messages = context.global.get('CACHE_MESSAGES');\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\nfunction scanForOrders(){\n    messages.arr.push({\n        \"flow\" : \"upload\",\n        \"type\" : \"info\",\n        \"on\" : Date.now(),\n        \"msg\" : \"Scanning of input folder for orders...\" \n    });\n            \n    // get integration logic\n    var integration = context.global.get('INTEGRATION');\n    \n    // extract jobs\n    var jobs = integration.extractJobs(\"/data/in\")\n    .then(function(jobs) {\n        node.log(\"Number of extracted jobs: \" + jobs.length)\n        messages.arr.push({\n            \"flow\" : \"upload\",\n            \"type\" : \"info\",\n            \"on\" : Date.now(),\n            \"msg\" : \"Found \" + jobs.length + \" order(s). Start processing orders...\" \n        });\n        // prepare output\n        msg.jobs = jobs;\n        node.send(msg);\n    });\n}\n\n//INFO: scanning is only allowed, if all former processedJobs are terminated (either canceled or success)\n\n//check if all processed jobs are terminated\nvar allProcessedJobsTerminated = true;\nfor (var id in processedJobs) {\n    if( processedJobs.hasOwnProperty(id) ) {\n        var processedJob = processedJobs[id];\n        if(processedJob.status == \"pending\"){\n            allProcessedJobsTerminated = false;\n            break;\n        }\n    }\n}\n\n//evaluate the result:\nif(allProcessedJobsTerminated === true){\n    scanForOrders();\n}\n\nelse{\n    messages.arr.push({\n        \"type\" : \"warning\",\n        \"on\" : Date.now(),\n        \"msg\" : \"A new order scan was prevented, because there are still pending orders. Please wait...\" \n    });    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "c40e83fb.5fa09"
            ]
        ]
    },
    {
        "id": "71cf47d7.5118c8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: moveJobFiles",
        "func": "const moveFile = context.global.get('MOVE_FILE');\nconst path = context.global.get('PATH');\nconst fs = context.global.get('FS');\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\nconst storageDir = \"/data/storage/\" + msg.job.storageFolder;\n\n// create directory\nif (!fs.existsSync(storageDir)){\n    fs.mkdirSync(storageDir);\n}\n\n// move files\nnode.log(\"Move files of job '\" + msg.job.jobId + \"' to \" + storageDir + \" ...\")\n\nfor(var i = 0; i < msg.job.files.length; i++){\n    var file = msg.job.files[i];\n    node.log(\"Move file '\" + file + \"' to \" + storageDir + path.basename(file) + \" ...\")\n    moveFile.sync(file, storageDir + path.basename(file));\n}\n\nprocessedJobs[msg.job.jobId].audit.push(\n    {\n        type : \"info\",\n        on   : Date.now(),\n        msg  : \"Moved files to storrage.\"\n    }\n);\n\n// return message object\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2320,
        "y": 140,
        "wires": [
            [
                "6a1f6b74.45ad84"
            ]
        ]
    },
    {
        "id": "8609f832.259ad8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: processAssemblerTask",
        "func": "\n// get request\nvar request = context.global.get('REQUEST');\n\n// get jobs caches\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// define options\nnode.log(\"Prepare AssemblerTask for job \" + msg.job.jobId);\n\nvar options = {\n    method: 'POST',\n    url: 'https://' + env.get(\"SPO_URL\") + '/api/rest/assembler/',\n    json: true,\n    body: msg.assemblerTask,\n    headers: {\n        \"X-Tenant\" : env.get(\"SPO_TENANT\"),\n        \"accept\" : \"application/json\",\n        \"Authorization\" : 'Basic ' + new Buffer(env.get(\"SPO_USER\") + \":\" + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        node.error(\"Unable to connect Assembler for job '\" + msg.job.jobId + \"'. Reason: \" + JSON.stringify(error));\n        processedJobs[msg.job.jobId].status = \"error\";\n        processedJobs[msg.job.jobId].audit.push(\n            {\n                type : \"error\",\n                on   : Date.now(),\n                msg  : \"Unable to connect Assembler.\"\n            }  \n        );\n        return;\n    \n    } else if (body['exception-Root'] !== undefined) {\n        var err = body['exception-Root'];\n        node.error(\"Assembler Parse Exception for Job '\" + msg.job.jobId + \"': \" + err.name + \" (statusCode: \" + err.statusCode + \") - \" + err.message);\n        processedJobs[msg.job.jobId].status = \"error\";\n        processedJobs[msg.job.jobId].audit.push(\n            {\n                type : \"error\",\n                on   : Date.now(),\n                msg  : \"Assembler parse exception.\"\n            }\n        );\n        return;\n        \n    } else {\n        if (body['assembler-Root'].exceptionInfo!==undefined) {\n            console.dir(body['assembler-Root']);\n            var errMessage = body['assembler-Root'].exceptionInfo.message;\n            node.error(\"Assembler Task Exception for Job '\" + msg.job.jobId + \"': \" + errMessage);\n            processedJobs[msg.job.jobId].status = \"error\";\n            processedJobs[msg.job.jobId].audit.push(\n                {\n                    type : \"error\",\n                    on   : Date.now(),\n                    msg  : \"Assembler task exception.\"\n                }\n            );\n          return;\n        } \n        \n        else {\n            msg.binderySignatures = body['assembler-Root'].result.binderySignatures.binderySignature;\n            node.log(\"Assembler has been executed sucessfully for job '\" + msg.job.jobId + \"'. Number BinderySignatures: \" + msg.binderySignatures.length);\n            processedJobs[msg.job.jobId].audit.push(\n                {\n                    type : \"info\",\n                    on   : Date.now(),\n                    msg  : \"Assembler created \" + msg.binderySignatures.length + \" bindery signatures.\"\n                }\n            );\n            node.send(msg);\n        }\n    }\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 200,
        "wires": [
            [
                "4aea9cdd.9cd1a4"
            ]
        ]
    },
    {
        "id": "4aea9cdd.9cd1a4",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Integration: processJobBinderySignatures",
        "func": "\n// get input logic\nvar integration = context.global.get('INTEGRATION');\n\n// process jobs bindery signatures\nintegration.processJobBinderySignatures(msg.binderySignatures, msg.job).then((modifiedBinderySignatures) => {\n    if(modifiedBinderySignatures !== null) {\n        msg.binderySignatures = modifiedBinderySignatures;\n        node.log(\"Post-process BinderySignatures for job '\" + msg.job.jobId + \"'. Number of BinderySignatures: \" + msg.binderySignatures.length);\n    } else {\n        node.log(\"SKIP post-process of BinderySignatures for job \" + msg.job.jobId);\n    }\n\n    node.send(msg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1720,
        "y": 140,
        "wires": [
            [
                "b705eaad.ac0528"
            ]
        ]
    },
    {
        "id": "b705eaad.ac0528",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: uploadBinderySignatures",
        "func": "\n// get request\nvar request = context.global.get('REQUEST');\n\n// get jobs caches\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// define options\nnode.log(\"Prepare upload of job \" + msg.job.jobId);\n\nvar body = { \"binderySignatures-Root\" : { \"binderySignature\" : msg.binderySignatures } };\n\nvar options = {\n    method: 'POST',\n    url: 'https://' + env.get(\"SPO_URL\") + '/api/rest/workspaces/id=' + env.get(\"SPO_WORKSPACE_ID\") + '/binderySignatures/',\n    json: true,\n    body: body,\n    headers: {\n        \"X-Tenant\" : env.get(\"SPO_TENANT\"),\n        \"accept\" : \"application/json\",\n        'Authorization': 'Basic ' + Buffer.from(env.get(\"SPO_USER\") + ':' + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        node.error(\"Unable to upload Job '\" + msg.job.jobId + \"'. Reason: \" + JSON.stringify(error));\n        processedJobs[msg.job.jobId].status = \"error\";\n        processedJobs[msg.job.jobId].audit.push(\n            {\n                type : \"error\",\n                on   : Date.now(),\n                msg  : \"Unable to upload: \" + JSON.stringify(error)\n            }\n        );        \n        return;\n        \n    } else if (body !== undefined && body['exception-Root'] !== undefined) {\n        var err = body['exception-Root'];\n        node.error(\"SPO Upload Exception for Job '\" + msg.job.jobId + \"': \" + err.name + \" (statusCode: \" + err.statusCode + \") - \" + err.message);\n        processedJobs[msg.job.jobId].status = \"error\";\n        processedJobs[msg.job.jobId].audit.push(\n            {\n                type : \"error\",\n                on   : Date.now(),\n                msg  : \"Upload exception: \" + (err.statusCode == 409 ? \"The ID is already in use.\" : err.message)\n            }\n        ); \n        return;\n    \n    } else {\n        node.log(\"Upload has been executed sucessfully for job '\" + msg.job.jobId + \"'. Number BinderySignatures: \" + msg.binderySignatures.length);\n        processedJobs[msg.job.jobId].audit.push(\n            {\n                type : \"info\",\n                on   : Date.now(),\n                msg  : \"The bindery signature(s) has been successfully uploaded.\"\n            }\n        );\n        node.send(msg);\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 2050,
        "y": 140,
        "wires": [
            [
                "71cf47d7.5118c8"
            ]
        ]
    },
    {
        "id": "ea73267a.9a6b18",
        "type": "inject",
        "z": "d4af305b.2ea44",
        "name": "debug trigger",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "5172bc7b.cdc624"
            ]
        ]
    },
    {
        "id": "c40e83fb.5fa09",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: prepareJobProcessing",
        "func": "// get caches\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\nvar messages = context.global.get('CACHE_MESSAGES');\n\nfunction processJob(job){\n    node.log(\"Start new job: \" + job.jobId);\n    \n    processedJobs[job.jobId] = {\n        \"id\"        : job.jobId,\n        \"startedOn\" : Date.now(),\n        \"status\"    : \"pending\",\n        \"audit\"     : [\n            {\n                type : \"info\",\n                on   : Date.now(),\n                msg  : \"Order has been prepared.\"\n            }    \n        ],\n    };\n    \n    node.send({ job: job })\n}\n\n//INFO: a job is only allowed to be processed, if it is not yet in processedJobs\nfor(var i = 0; i < msg.jobs.length; i++){\n    var job = msg.jobs[i];\n    \n    if(!processedJobs.hasOwnProperty(job.jobId)) {\n        processJob(job);\n    } \n    \n    else {\n        node.log(\"Job '\" + job.jobId + \"' is already processing.\")\n        messages.arr.push({\n            \"flow\" : \"upload\",\n            \"type\" : \"warning\",\n            \"on\" : Date.now(),\n            \"msg\" : \"Order '\" + job.jobId + \"' was already processed. Please reset first.\" \n        });\n    }        \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "ea59f95b.d9cec8"
            ]
        ]
    },
    {
        "id": "308cafb9.d358e",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/debug",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "8b59f44e.309848"
            ]
        ]
    },
    {
        "id": "8b59f44e.309848",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "debug info",
        "func": "\n// get active jobs cache\nvar activeJobs = context.global.get('CACHE_ACTIVE_JOBS');\n\nvar result = [];\n\nfor(var key in activeJobs) {\n    result.push({\n        \"jobId\":key,\n        \"startTime\": activeJobs[key]\n    });\n}\n\nmsg.payload.activeJobs = result\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 740,
        "wires": [
            [
                "aa9f30a9.a0c99"
            ]
        ]
    },
    {
        "id": "6a1f6b74.45ad84",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: cleanUpJob",
        "func": "\n// get jobId\nvar jobId = msg.job.jobId;\n\nnode.log(\"Processing job '\" + jobId + \"' has been completed.\")\n\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\nprocessedJobs[msg.job.jobId].status = \"success\";\nprocessedJobs[msg.job.jobId].audit.push(\n    {\n        type : \"info\",\n        on   : Date.now(),\n        msg  : \"Order processing successfully completed.\"\n    }\n);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2550,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "42b7b0fc.eed79",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "RESTful Controller API",
        "info": "",
        "x": 140,
        "y": 900,
        "wires": []
    },
    {
        "id": "6fd34592.eb8f2c",
        "type": "inject",
        "z": "d4af305b.2ea44",
        "name": "health-check",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 820,
        "wires": [
            [
                "cdee81a6.8fba1"
            ]
        ]
    },
    {
        "id": "cdee81a6.8fba1",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "health-check",
        "func": "node.log(\"Process health check...\")\n\n// check active jobs for timeout\nconst TIMEOUT_ACTIVE_JOBS = 60 * 1000; // 1 minute\n\nvar activeJobs = context.global.get('CACHE_ACTIVE_JOBS');\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\nfor(var key in activeJobs) {\n    if(activeJobs[key] < Date.now() - TIMEOUT_ACTIVE_JOBS) {\n        node.warn(\"Timeout of active job: \" + key)\n        \n        if(processedJobs[key].status == \"pending\"){\n            processedJobs[key].status = \"canceled\";\n            processedJobs[key].audit.push(\n                {\n                    type : \"error\",\n                    on   : Date.now(),\n                    msg  : \"Time out.\"\n                }  \n            );           \n        }\n    }\n    \n\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "77d56e74.1d37",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "User Interface (HTTP Server)",
        "info": "",
        "x": 160,
        "y": 1620,
        "wires": []
    },
    {
        "id": "852b154e.c8d0f8",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/spo-settings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "b2ed4347.33229"
            ]
        ]
    },
    {
        "id": "b2ed4347.33229",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read spo settings",
        "func": "// prepare result\nmsg.payload = {\n    tenant: env.get(\"SPO_TENANT\"),\n    user: env.get(\"SPO_USER\"),\n    workspaceId: env.get(\"SPO_WORKSPACE_ID\"),\n    url: env.get(\"SPO_URL\")\n};\n\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 1480,
        "wires": [
            [
                "b7ef0e77.c2a41"
            ]
        ]
    },
    {
        "id": "b7ef0e77.c2a41",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1480,
        "wires": []
    },
    {
        "id": "84cbea2a.706988",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "controller/files/data-in",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1520,
        "wires": [
            [
                "b4918ad2.0b3cc8"
            ]
        ]
    },
    {
        "id": "18df55e5.bb2d6a",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1520,
        "wires": []
    },
    {
        "id": "b4918ad2.0b3cc8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read files data in",
        "func": "const fs = context.global.get('FS');\nconst root = \"/data/in\";\n\nfunction getFileInfos(root, filename) {\n    var filePath = root + \"/\" + filename;\n    \n    try {\n        var stats = fs.statSync(filePath);\n        var fileSizeInKiloBytes = Math.ceil(stats[\"size\"] / 1024);\n        var i = filename.lastIndexOf('.');\n        return {\n            name : filename,\n            type : (i < 0) ? '' : filename.substr(i+1),\n            size : fileSizeInKiloBytes\n        }\n    }\n    catch(err) {\n        node.log('file does no longer exist: ' + filePath);\n        return null;\n    }\n    /*fs.stat(filePath, function(err, stats) {\n        if (err){\n            node.log('file does no longer exist: ' + filePath);\n            return null;\n        }\n        \n        else{\n            var fileSizeInKiloBytes = Math.ceil(stats[\"size\"] / 1024);\n            var i = filename.lastIndexOf('.');\n            return {\n                name : filename,\n                type : (i < 0) ? '' : filename.substr(i+1),\n                size : fileSizeInKiloBytes\n            }\n        }\n    });*/\n}\n\n// read directory\nfs.readdir(root, function(err, files) {\n    msg.payload = [];\n    if(files !== undefined){\n        for(var i = 0; i < files.length; i++){\n            var file = files[i];\n            var fileInfos = getFileInfos(root, file);\n            if(fileInfos !== null) msg.payload.push(fileInfos);\n        }\n    }\n    node.send(msg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1520,
        "wires": [
            [
                "18df55e5.bb2d6a"
            ]
        ]
    },
    {
        "id": "45a6016e.e5ca2",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "controller/files/scan",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "5172bc7b.cdc624",
                "490c864b.ac8e98"
            ]
        ]
    },
    {
        "id": "490c864b.ac8e98",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "204",
        "headers": {},
        "x": 360,
        "y": 180,
        "wires": []
    },
    {
        "id": "3f8ba965.b2ff16",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "sPrintOne Upload Process",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "72ba88a5.0da458",
        "type": "inject",
        "z": "d4af305b.2ea44",
        "name": "start-up",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 100,
        "y": 420,
        "wires": [
            [
                "cc31ed7f.8dc71"
            ]
        ]
    },
    {
        "id": "cedb6d39.38aa5",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: analyzeNotification",
        "func": "\nif (msg.notification[\"resourceCreationNotification-Root\"] !== undefined) {\n    node.log(\"Notification 'resourceCreationNotification' has been received...\");\n    msg.resourceCreationNotification = msg.notification[\"resourceCreationNotification-Root\"];\n    return [msg,null];\n    \n} else if(msg.notification[\"resourceStateChangeNotification-Root\"] !== undefined) {\n    node.log(\"Notification 'resourceStateChangeNotification' has been received...\");\n    msg.resourceStateChangeNotification = msg.notification[\"resourceStateChangeNotification-Root\"];\n    return [null,msg];\n    \n} else if(msg.notification[\"handshakeNotification-Root\"] !== undefined) {\n    node.log(\"Notification 'handshakeNotification' has been received...\");\n    msg.handshakeNotification = msg.notification[\"handshakeNotification-Root\"];\n    return [null,msg];\n}\n\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "x": 570,
        "y": 420,
        "wires": [
            [
                "254be278.6ed3de"
            ],
            [
                "b8a6c851.ce01d8"
            ]
        ]
    },
    {
        "id": "254be278.6ed3de",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: loadSheetDetails",
        "func": "const request = context.global.get('REQUEST');\n\n// extract planned event id\nvar plannedEventId = msg.resourceCreationNotification.href.match(\"[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}\");\nnode.log(\"Load event details for plannedEvent '\" + plannedEventId + \"'...\")\n\n\n// define options\nvar options = {\n    method: 'GET',\n    url: 'https://' + env.get(\"SPO_URL\") + '/' + msg.resourceCreationNotification.href + '?_nodeVisibility=*/href:VISIBLE',\n    json: true,\n    headers: {\n        \"X-Tenant\" : env.get(\"SPO_TENANT\"),\n        \"accept\" : \"application/json\",\n        \"Authorization\" : 'Basic ' + new Buffer(env.get(\"SPO_USER\") + \":\" + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        node.error(\"Unable to connect SPO for plannedEvent '\" + plannedEventId + \"'. Reason: \" + JSON.stringify(error));\n    } \n    \n    else if (body['exception-Root'] !== undefined) {\n        var err = body['exception-Root'];\n        node.error(\"SPO Exception for plannedEvent '\" + plannedEventId + \"': \" + err.name + \" (statusCode: \" + err.statusCode + \") - \" + err.message);\n    } \n    \n    else if (body['events-Root'] !== undefined) {\n        var events = body['events-Root'];\n        node.log(\"Event details has been loaded sucessfully for PlannedEvent '\" + plannedEventId + \"'. Number of Events: \" + events.event.length);\n        \n        for(var i = 0; i < events.event.length; i ++) {\n            node.log(\"Process PlannedEvent '\" + plannedEventId + \"'...\")\n            node.send({event:  events.event[i]});\n        }\n    }\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 420,
        "wires": [
            [
                "f7348dc4.1ae43"
            ]
        ]
    },
    {
        "id": "bd9a7cff.06cad",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "resourceCreation",
        "info": "",
        "x": 800,
        "y": 380,
        "wires": []
    },
    {
        "id": "44f0a913.ba1258",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "resourceStateChange & handshake",
        "info": "",
        "x": 860,
        "y": 480,
        "wires": []
    },
    {
        "id": "b8a6c851.ce01d8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: spoDebug",
        "func": "\n\nif(msg.notification !== undefined) {\n    node.log(\"WebSocket handshake successful.\");\n    \n}\n\n\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cc31ed7f.8dc71",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: notificationListener",
        "func": "var WebSocket = global.get('WS');\nflow.set('websocket',false);\n\n/**\n * Class for managing the websocket communication\n **/\nvar WebsocketManager = function() {\n\n    // the reconnect timeinterval in ms\n    this.reconnectInterval = 500;\n    \n    // the websocket url\n    this.websocketUrl = \"wss://\" + env.get(\"SPO_URL\") + \"/api/websocket/notifications\";\n    \n    // websocket headers\n    this.headers = {\n        'Accept': 'application/json',\n        'X-Tenant': env.get(\"SPO_TENANT\") ,\n        'Authorization': 'Basic ' + Buffer.from(env.get(\"SPO_USER\") + ':' + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n    \n    var tagsToReplace = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n    \n    var replaceTag = function(tag) {\n        return tagsToReplace[tag] || tag;\n    }\n    \n    var safe_tags_replace = function(str) {\n        return str.replace(/[&<>]/g, replaceTag);\n    }\n    \n    /**\n     * Method for connecting the SPO WebSocket.\n     */ \n    this.connect = function() {\n        node.log('Connecting to SPO Websocket ' + this.websocketUrl +'...');\n        \n    \n        var manager = this;\n        \n        \n        \n        var headerLines = [];\n        for(var name in this.headers) {\n            headerLines.push(name + ': ' + this.headers[name]);\n        }\n        var headersString = Buffer.from(headerLines.join(\"\\r\\n\")).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '.');\n        \n        this.websocket = new WebSocket(this.websocketUrl, ['Headers', 'Headers-' + headersString]);\n        \n        /**\n         * Function is called when connection has been established.\n         */ \n        this.websocket.onopen = function(openEvent) {\n            node.log('SPO Websocket connection ' + manager.websocketUrl +' has been established successfully.');\n            flow.set('websocket',true);\n        };\n        \n        /**\n         * Function is called when connection has been closed.\n         */ \n        this.websocket.onclose = function(closeEvent) {\n            node.error('Connection lost/refused, retry in ' + (manager.reconnectInterval / 1000) + ' seconds');\n            flow.set('websocket',false);\n            setTimeout(function() {\n                manager.connect();\n            }, manager.reconnectInterval);\n        };\n\n        /**\n         * Function is called in case of an error.\n         */ \n        this.websocket.onerror = function(errorEvent) {\n            node.error('Error occured: ' + errorEvent);\n        };\n        \n        /**\n         * Function is called when a message has been received.\n         */ \n        this.websocket.onmessage = function(messageEvent) {\n            node.send({\n                notification: JSON.parse(messageEvent.data)\n            });\n        };\n    \n    };\n    \n    /**\n     * Method for closing the SPO WebSocket connection.\n     */\n    this.close = function() {\n    \n        var manager = this;\n        \n        this.websocket.onclose = function(closeEvent) {\n            node.log('WebSocket connection ' + manager.websocketUrl +' has been closed.');\n            flow.set('websocket',false);\n        };\n        \n        this.websocket.close();\n    \n    };\n  \n};\n\n\n// if exists, close connection\nif(context.get('websocketManager')) {\n    context.get('websocketManager').close()\n}\n\n// create new websocket manager object\nvar websocketManager = new WebsocketManager();\n\n// close connection when nodered ends\nnode.on('close', function() {\n    websocketManager.close()\n});\n\n// establish connection\nwebsocketManager.connect();\n\n// keep manager in context\ncontext.set('websocketManager', websocketManager);\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 420,
        "wires": [
            [
                "cedb6d39.38aa5"
            ]
        ]
    },
    {
        "id": "f7348dc4.1ae43",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Integration: generateSheetId",
        "func": "//get cache\nvar receivedPrintJobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\nvar messages = context.global.get('CACHE_MESSAGES');\n\n// get input logic\nvar integration = context.global.get('INTEGRATION');\n\n// process jobs bindery signatures\nintegration.generateSheetId(msg.event).then((sheetId) => {\n    msg.sheetId = sheetId\n    node.log(\"Generated SheetId '\" + msg.sheetId + \"' for event '\" + msg.event.id + \"'\");\n        \n    messages.arr.push({\n        \"flow\" : \"download\",\n        \"type\" : \"info\",\n        \"on\" : Date.now(),\n        \"msg\" : \"Received new print job '\" + msg.sheetId + \"'.\" \n    });\n    \n    receivedPrintJobs[msg.sheetId] = {\n        \"id\"        : msg.sheetId,\n        \"receivedOn\" : Date.now(),\n        \"status\"    : \"pending\",\n        \"audit\"     : [\n            {\n                type : \"info\",\n                on   : Date.now(),\n                msg  : \"Received new print job '\" + msg.sheetId + \"'.\"\n            }    \n        ],\n    };\n    \n    node.send(msg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "788ebb62.fb12f4"
            ]
        ]
    },
    {
        "id": "788ebb62.fb12f4",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: createOutputDir",
        "func": "const path = context.global.get('PATH');\nconst fs = context.global.get('FS');\nvar receivedPrintJobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// define sheets directory\nvar sheetDirectory = path.join(\"/data/out/\", msg.sheetId);\n\n// create folder\nfs.mkdir(sheetDirectory, { recursive: true }, (err) => {\n    if (err) throw err;\n  \n    node.log(\"Sheets output directory '\" + sheetDirectory + \"' has been created.\")\n    \n    receivedPrintJobs[msg.sheetId].audit.push({\n        type : \"info\",\n        on   : Date.now(),\n        msg  : \"output directory '\" + sheetDirectory + \"' has been created.\"\n    });\n    \n    msg.sheetDirectory = sheetDirectory;\n    msg.output = {}\n    node.send(msg);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1340,
        "y": 420,
        "wires": [
            [
                "884c8dea.93d93",
                "559cf6a4.1e9998"
            ]
        ]
    },
    {
        "id": "559cf6a4.1e9998",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: loadGangJobEventXML",
        "func": "const request = context.global.get('REQUEST');\nvar receivedPrintJobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// define request options\nvar options = {\n    method: 'GET',\n    url: 'https://' + env.get(\"SPO_URL\") + '/' + msg.event.href + '/@GangJobEvent?_nodeVisibility=$GANG_JOB_EVENT_COMPLETE',\n    json: true,\n    headers: {\n        \"X-Tenant\" : env.get(\"SPO_TENANT\"),\n        \"accept\" : \"application/xml\",\n        \"Authorization\" : 'Basic ' + new Buffer(env.get(\"SPO_USER\") + \":\" + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        receivedPrintJobs[msg.sheetId].status = \"error\";\n        receivedPrintJobs[msg.sheetId].audit.push({\n            type : \"error\",\n            on   : Date.now(),\n            msg  : \"Unable to load GangJobEvent.\"\n        });\n        \n        node.error(\"Unable to load GangJobEvent for '\" + msg.sheetId + \"'. Reason: \" + JSON.stringify(error));\n    } \n    \n    else {\n        // append GangJobEvent to message\n        msg.gangJobEventXml = body;\n        \n        receivedPrintJobs[msg.sheetId].audit.push({\n            type : \"info\",\n            on   : Date.now(),\n            msg  : \"GangJobEvent XML has been received.\"\n        });\n        \n        node.log('GangJobEvent XML has been received for sheet \\'' + msg.sheetId + '\\'.');\n        node.send(msg);\n    \n    }\n        \n});",
        "outputs": 1,
        "noerr": 0,
        "x": 1670,
        "y": 420,
        "wires": [
            [
                "eed5a2d7.51d2e"
            ]
        ]
    },
    {
        "id": "eed5a2d7.51d2e",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: gangJobEvent (xml)",
        "func": "const pb = context.global.get('PRETTY_BYTES');\nconst path = context.global.get('PATH');\nconst fs = context.global.get('FS');\n\n// save GangJobEvent XML to output directory\nvar filename = path.join(msg.sheetDirectory, msg.sheetId + \"-gangJobEvent.xml\");\n\nfs.writeFile(filename, msg.gangJobEventXml, (err) => {\n    if (err) throw err;\n    \n    msg.output.event = path.basename(filename);\n    \n    node.log(\"Write file '\" + filename + \"' (\" + pb(fs.statSync(filename).size) + \").\");\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 1950,
        "y": 420,
        "wires": [
            [
                "ab781dee.626f6"
            ]
        ]
    },
    {
        "id": "4ec5e078.76e06",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/imposition",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1560,
        "wires": [
            [
                "1ba0b50c.4454cb"
            ]
        ]
    },
    {
        "id": "1ba0b50c.4454cb",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read imposition",
        "func": "const request = context.global.get('REQUEST');\n\n// define options\nvar options = {\n    method: 'GET',\n    url: env.get(\"IMPOSITION_URL\") + '/version',\n    timeout: 500,\n    json: true,\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        node.warn(\"Unable to connect Imposition Service '\" + env.get(\"IMPOSITION_URL\") + \"'\");\n    \n        msg.payload = {\n            status: 'Unavailable',\n            version: \"\",\n            timestamp: \"\",\n            revision: \"\"\n        }\n    \n    } else if (body['appName'] !== undefined) {\n        msg.payload = {\n            status: 'Online',\n            version: body['appVersion'],\n            timestamp: body['buildTime'],\n            revision: body['commitId']\n        }\n        \n        \n    } \n    \n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1560,
        "wires": [
            [
                "db0181c9.88bf5"
            ]
        ]
    },
    {
        "id": "db0181c9.88bf5",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1560,
        "wires": []
    },
    {
        "id": "d26a4dcd.fc43c",
        "type": "comment",
        "z": "d4af305b.2ea44",
        "name": "File Output:",
        "info": "",
        "x": 1910,
        "y": 380,
        "wires": []
    },
    {
        "id": "884c8dea.93d93",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: loadGangJobEventJSON",
        "func": "const request = context.global.get('REQUEST');\n\n// define request options\nvar options = {\n    method: 'GET',\n    url: 'https://' + env.get(\"SPO_URL\") + '/' + msg.event.href + '/@GangJobEvent?_nodeVisibility=/auditLog:VISIBLE&_nodeVisibility=$GANG_JOB_EVENT_COMPLETE',\n    json: true,\n    headers: {\n        \"X-Tenant\" : env.get(\"SPO_TENANT\"),\n        \"accept\" : \"application/json\",\n        \"Authorization\" : 'Basic ' + new Buffer(env.get(\"SPO_USER\") + \":\" + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        node.error(\"Unable to load GangJobEvent JSON for '\" + msg.sheetId + \"'. Reason: \" + JSON.stringify(error));\n    \n    } else {\n        // append GangJobEvent to message\n        msg.gangJobEventJson = body;\n        node.log('GangJobEvent JSON has been received for sheet \\'' + msg.sheetId + '\\'.');\n        node.send(msg);\n    \n    }\n        \n});",
        "outputs": 1,
        "noerr": 0,
        "x": 1670,
        "y": 480,
        "wires": [
            [
                "89651d3e.7370a",
                "f076011.b2542"
            ]
        ]
    },
    {
        "id": "c4125dcd.1043",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Integration: moveFiles",
        "func": "var receivedPrintJobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// get input logic\nvar integration = context.global.get('INTEGRATION');\n\nnode.log(\"Move files for '\" + msg.sheetId + \"'...\")\n\n// process jobs bindery signatures\nintegration.moveFiles(msg.sheetDirectory, msg.job, \"/data/storage\")\n.then(() => {\n    node.log(\"Move files for '\" + msg.sheetId + \"' successful.\")\n    \n    receivedPrintJobs[msg.sheetId].audit.push({\n        type : \"info\",\n        on   : Date.now(),\n        msg  : \"Moved files.\"\n    });     \n})\n.catch((error) =>{\n    node.log(error);\n    receivedPrintJobs[msg.sheetId].status = \"error\";\n    receivedPrintJobs[msg.sheetId].audit.push({\n        type : \"error\",\n        on   : Date.now(),\n        msg  : \"Error at moving files.\"\n    });     \n})\n.finally(function(){\n    node.send(msg);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2200,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "f076011.b2542",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: extractJobInfos",
        "func": "//Create an internal job object for this flow\n\n//data source\nvar gangJobEvent = msg.gangJobEventJson[\"gangJobEvent-Root\"];\nvar gangJob = gangJobEvent.gangJob;\nvar media = gangJob.media;\nvar binderySignatures = gangJob.binderySignatures.binderySignature;\n\n//write to data target\n\n//for each bindery signature of the gangJobEvent\nvar bindSigs = [];\nbinderySignatures.forEach(function(binderySignature){\n  bindSigs.push({\n      id : binderySignature.id,\n      orderRef : binderySignature.orderRef\n  })\n});\n\n//create job object\nmsg.job = {\n    duration : gangJobEvent.plannedDuration,\n    workstyle : gangJob.workStyle,\n    mediaLabel : media.label,\n    mediaId : media.id,\n    mediaFormat : media.format,\n    binderySignatures : bindSigs\n};\n\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "x": 1940,
        "y": 480,
        "wires": [
            [
                "c4125dcd.1043"
            ]
        ]
    },
    {
        "id": "ea59f95b.d9cec8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: retrieveMedias",
        "func": "// get request\nvar request = context.global.get('REQUEST');\n\n// define options\nnode.log(\"Prepare media retrieval from workspace with id='\" + env.get('SPO_WORKSPACE_ID')+\"'\");\n\nvar options = {\n    method: 'GET',\n    url: 'https://' + env.get(\"SPO_URL\") + '/api/rest/workspaces/id=' + env.get(\"SPO_WORKSPACE_ID\") + '/medias/',\n    json: true,\n    headers: {\n        \"X-Tenant\" : env.get(\"SPO_TENANT\"),\n        \"accept\" : \"application/json\",\n        'Authorization': 'Basic ' + Buffer.from(env.get(\"SPO_USER\") + ':' + env.get(\"SPO_PASSWORD\")).toString('base64')\n    }\n}\n\n// execute request\nrequest(options, (error, response, body) => {\n    if (error) {\n        node.error(\"Unable to retrieve medias from workspace with id='\" + env.get('SPO_WORKSPACE_ID') + \"'. Reason: \" + JSON.stringify(error));\n        return;\n    } else if (body !== undefined && body['exception-Root'] !== undefined) {\n        var err = body['exception-Root'];\n        node.error(\"SPO Download Exception for Medias in workspace with id='\" + env.get('SPO_WORKSPACE_ID') + \"': \" + err.name + \" (statusCode: \" + err.statusCode + \") - \" + err.message + \"[\" + options.url + \"]\");\n        return;\n    } else {\n        msg.mediaList=body['medias-Root'].media;\n        node.log(\"Media retrieval from workspace with id='\"+env.get('SPO_WORKSPACE_ID')+\"' has been sucessful. Number Medias: \" + msg.mediaList.length);\n        node.send(msg);\n        \n    }\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 140,
        "wires": [
            [
                "e87f497a.fb0198"
            ]
        ]
    },
    {
        "id": "89651d3e.7370a",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: writeApogeeJobTicket_(beta))",
        "func": "var receivedPrintJobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\nconst path = context.global.get('PATH');\n\nconst jobTicketGenerator = context.global.get('JOB_TICKET_GENERATOR');\nconst apogeeJobTicketLocation = path.join(msg.sheetDirectory,msg.sheetId+\"_apogeeV9_JobTicket.jdf\");\n\nif (msg.gangJobEventJson[\"gangJobEvent-Root\"].gangJob.workStyle===\"SIMPLEX\") {\n    if (!context.global.get(\"apogeeJdfModel_Simplex\")) {\n        const fs = context.global.get('FS');\n        fs.readFile('jobTicketGenerator/apogee/model/ApogeeJdfV9_model_Simplex.jdf',\n            function (err, data) {\n                if (err) throw \"Apogee Jdf Simplex Model file could not be read - Error message: \" + err;\n                var lineArray = data.toString().split(\"\\n\");\n                context.global.set(\"apogeeJdfModel_Simplex\",lineArray);\n                node.log(\"ApogeeJdf-Simplex-Model initialized\");\n                jobTicketGenerator.writeApogeeJdf(\n                    apogeeJobTicketLocation,\n                    msg.sheetId,\n                    msg.gangJobEventJson[\"gangJobEvent-Root\"],\n                    0,\n                    context.global.get(\"apogeeJdfModel_Simplex\"));\n            }\n        );    \n    } else {\n        jobTicketGenerator.writeApogeeJdf(\n            apogeeJobTicketLocation,\n            msg.sheetId,\n            msg.gangJobEventJson[\"gangJobEvent-Root\"],\n            0,\n            context.global.get(\"apogeeJdfModel_Simplex\"));\n    }\n} else {\n    if (!context.global.get(\"apogeeJdfModel\")) {\n        const fs = context.global.get('FS');\n        fs.readFile('jobTicketGenerator/apogee/model/ApogeeJdfV9_model.jdf',\n            function (err, data) {\n                if (err) throw \"Apogee Jdf Model file could not be read - Error message: \" + err;\n                var lineArray = data.toString().split(\"\\n\");\n                context.global.set(\"apogeeJdfModel\",lineArray);        \n                node.log(\"Apogee-Jdf-Model initialized\");\n                jobTicketGenerator.writeApogeeJdf(\n                    apogeeJobTicketLocation,\n                    msg.sheetId,\n                    msg.gangJobEventJson[\"gangJobEvent-Root\"],\n                    0,\n                    context.global.get(\"apogeeJdfModel\"));\n            }\n        );    \n    } else {\n        jobTicketGenerator.writeApogeeJdf(\n            apogeeJobTicketLocation,\n            msg.sheetId,\n            msg.gangJobEventJson[\"gangJobEvent-Root\"],\n            0,\n            context.global.get(\"apogeeJdfModel\"));\n    }\n}\n\nnode.log(\"Apogee-JobTicket written to: \" + apogeeJobTicketLocation);\nreceivedPrintJobs[msg.sheetId].audit.push({\n    type : \"info\",\n    on   : Date.now(),\n    msg  : \"Apogee-JobTicket written to: \" + apogeeJobTicketLocation\n}); \nnode.send(msg);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1990,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6540c97b.74e5d8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "load asset",
        "func": "const fs = context.global.get('FS');\nconst path = context.global.get('PATH');\n\nvar root = './src/html/';\nvar url = msg.req.url;\n\nif(url.substr(url.length - 5).indexOf(\".\") === -1){\n    url = path.join(url, \"index.html\");\n}\n\n// set asset path\nvar assetPath = path.join(root, url);\n\n// define content type\nvar contentType = \"application/octet-stream\"\n\nif(path.extname(assetPath) === \".html\" || path.extname(assetPath) === \".htm\") {\n    contentType = 'text/html';\n} else if (path.extname(assetPath) === \".js\") {\n    contentType = 'text/javascript';\n} else if (path.extname(assetPath) === \".css\") {\n    contentType = 'text/css';\n} else if (path.extname(assetPath) === \".ico\") {\n    contentType = 'image/x-icon';\n} else if (path.extname(assetPath) === \".svg\") {\n    contentType = 'image/svg+xml';\n}\n\n\n// try to deliver asset\nif(fs.existsSync(assetPath)) {\n    fs.readFile(assetPath, (err, data) => {\n        if (err) throw err;\n        \n        msg.payload = data;\n        msg.statusCode = 200;\n        msg.headers = {\n            'Content-Type': contentType\n        };\n        \n        node.send(msg);\n    });\n    \n} else {\n    node.warn(\"Asset not found: \" + assetPath + \" (\" + contentType + \")\")\n    \n    assetPath = path.join(root, \"404.html\");\n    fs.readFile(assetPath, (err, data) => {\n        if (err) throw err;\n        \n        msg.payload = data;\n        msg.statusCode = 404;\n        msg.headers = {\n            'Content-Type': contentType\n        };\n        \n        node.send(msg);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 1680,
        "wires": [
            [
                "7e8fdeb4.45173"
            ]
        ]
    },
    {
        "id": "7e8fdeb4.45173",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 430,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d123e0d0.f70b9",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/processed-jobs",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1060,
        "wires": [
            [
                "cc33d788.dccd28"
            ]
        ]
    },
    {
        "id": "cc33d788.dccd28",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read processed jobs",
        "func": "\n// load active jobs\nvar processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// prepare result\nvar result = [];\n\nfor(var key in processedJobs) {\n    var entry = processedJobs[key];\n    result.push(entry);\n}\n\nmsg.payload = result;\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 1060,
        "wires": [
            [
                "b2807223.17479"
            ]
        ]
    },
    {
        "id": "b2807223.17479",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 980,
        "wires": []
    },
    {
        "id": "3cfc4f40.4933d",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/messages",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "c863824b.beeb1"
            ]
        ]
    },
    {
        "id": "c863824b.beeb1",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read messages",
        "func": "\n// load active jobs\nvar messages = context.global.get('CACHE_MESSAGES');\n\n\nmsg.payload = messages.arr;\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1380,
        "wires": [
            [
                "6ece029b.8ab3bc"
            ]
        ]
    },
    {
        "id": "6ece029b.8ab3bc",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1380,
        "wires": []
    },
    {
        "id": "956c0415.832b18",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete all processed jobs",
        "func": "const processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// reset all jobs\nvar numberJobs = Object.keys(processedJobs).length;\n\nfor(var key in processedJobs) {\n    delete processedJobs[key];\n    node.warn(\"Processed job '\" + key + \"' has been deleted.\")\n}\n\nnode.warn(\"All \"+ numberJobs + \" processed jobs have been resetted.\");\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 1020,
        "wires": [
            [
                "b2807223.17479"
            ]
        ]
    },
    {
        "id": "b15d1871.9b3e78",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/processed-jobs/id/:jobId",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "2a47847c.1bc54c"
            ]
        ]
    },
    {
        "id": "b72c7f26.83b66",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/processed-jobs",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "956c0415.832b18"
            ]
        ]
    },
    {
        "id": "92cf1fae.901e3",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Init Messages Array",
        "func": "//init MESSAGES\nvar messages = context.global.get('CACHE_MESSAGES');\nif(!messages.hasOwnProperty('arr')) messages['arr'] = [];\nnode.log(\"Messages array was initialized.\");\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2a47847c.1bc54c",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete processed job by id",
        "func": "const processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// get jobId\nvar jobId = msg.req.params.jobId;\n\n\nif(jobId !== undefined) {\n    \n    // reset specific job\n    delete processedJobs[jobId];\n    \n    node.warn(\"Processed job '\" + jobId + \"' has been deleted.\")\n} \nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 940,
        "wires": [
            [
                "b2807223.17479"
            ]
        ]
    },
    {
        "id": "ea0ee9fe.cdc6e8",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/processed-jobs/status/:status",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 980,
        "wires": [
            [
                "912ecf0c.d4fed"
            ]
        ]
    },
    {
        "id": "912ecf0c.d4fed",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete processed job by status",
        "func": "const processedJobs = context.global.get('CACHE_PROCESSED_JOBS');\n\n// get jobId\nvar status = msg.req.params.status;\n\n\nif(status !== undefined) {\n    \n    // reset all jobs with status X\n    var numberJobsBefore = Object.keys(processedJobs).length;\n    \n    for(var key in processedJobs) {\n        if(processedJobs.hasOwnProperty(key)){\n            var processedJob = processedJobs[key];\n            if(processedJob.status === status){\n                delete processedJobs[key];\n                node.warn(\"Processed job '\" + key + \"' has been deleted.\")\n            }\n        }\n    }\n    \n    var numberJobsAfter = Object.keys(processedJobs).length;\n    var deletedJobs = numberJobsBefore - numberJobsAfter;\n    \n    node.warn(deletedJobs + \" processed jobs with status '\" + status + \"' have been deleted.\");\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 980,
        "wires": [
            [
                "b2807223.17479"
            ]
        ]
    },
    {
        "id": "7954dfba.4025f",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/messages",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "20e2a162.235e6e"
            ]
        ]
    },
    {
        "id": "20e2a162.235e6e",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete all messages",
        "func": "\n// load active jobs\nvar messages = context.global.get('CACHE_MESSAGES');\n\n\nmessages['arr'] = [];\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "6ece029b.8ab3bc"
            ]
        ]
    },
    {
        "id": "29533745.531578",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/messages/:flow",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1300,
        "wires": [
            [
                "bd891eb1.de071"
            ]
        ]
    },
    {
        "id": "bd891eb1.de071",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete messages by flow",
        "func": "\n// load active jobs\nvar messages = context.global.get('CACHE_MESSAGES');\n\n// get jobId\nvar flow = msg.req.params.flow;\n\n\nif(flow !== undefined) {\n    var tempArr = [];\n    for(var i = 0; i < messages['arr'].lenght; i++)\n        if(messages['arr'][i].flow !== flow)\n            tempArr.push(messages['arr'][i]);\n}\n    \nmessages['arr'] = tempArr;\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 1300,
        "wires": [
            [
                "6ece029b.8ab3bc"
            ]
        ]
    },
    {
        "id": "22425723.b28158",
        "type": "inject",
        "z": "d4af305b.2ea44",
        "name": "start-up",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "92cf1fae.901e3"
            ]
        ]
    },
    {
        "id": "1b3e9db1.8a8142",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/printjobs",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1240,
        "wires": [
            [
                "8af12808.9e6af8"
            ]
        ]
    },
    {
        "id": "8af12808.9e6af8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read print jobs",
        "func": "\n// load active jobs\nvar printjobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// prepare result\nvar result = [];\n\nfor(var key in printjobs) {\n    var entry = printjobs[key];\n    result.push(entry);\n}\n\nmsg.payload = result;\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "e729b6ed.e56d68"
            ]
        ]
    },
    {
        "id": "e729b6ed.e56d68",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d7bf7774.f7ff08",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete all printjobs",
        "func": "const printjobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// reset all jobs\nvar numberJobs = Object.keys(printjobs).length;\n\nfor(var key in printjobs) {\n    delete printjobs[key];\n    node.warn(\"Printjob '\" + key + \"' has been deleted.\")\n}\n\nnode.warn(\"All \"+ numberJobs + \" printjobs have been deleted.\");\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 1200,
        "wires": [
            [
                "e729b6ed.e56d68"
            ]
        ]
    },
    {
        "id": "2e419a3e.804616",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/printjobs/id/:jobId",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "98f50994.c9e2a8"
            ]
        ]
    },
    {
        "id": "7c85d10b.79fb9",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/printjobs",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1200,
        "wires": [
            [
                "d7bf7774.f7ff08"
            ]
        ]
    },
    {
        "id": "98f50994.c9e2a8",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete processed job by id",
        "func": "const printjobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// get jobId\nvar jobId = msg.req.params.jobId;\n\n\nif(jobId !== undefined) {\n    \n    // reset specific job\n    delete printjobs[jobId];\n    \n    node.warn(\"Printjob '\" + jobId + \"' has been deleted.\")\n} \nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 1120,
        "wires": [
            [
                "e729b6ed.e56d68"
            ]
        ]
    },
    {
        "id": "9670c0e4.6a64",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/printjobs/status/:status",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1160,
        "wires": [
            [
                "35055277.cc336e"
            ]
        ]
    },
    {
        "id": "35055277.cc336e",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "delete printjob by status",
        "func": "const printjobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// get jobId\nvar status = msg.req.params.status;\n\n\nif(status !== undefined) {\n    \n    // reset all jobs with status X\n    var numberJobsBefore = Object.keys(printjobs).length;\n    \n    for(var key in printjobs) {\n        if(printjobs.hasOwnProperty(key)){\n            var printjob = printjobs[key];\n            if(printjob.status === status){\n                delete printjobs[key];\n                node.warn(\"Printjob '\" + key + \"' has been deleted.\")\n            }\n        }\n    }\n    \n    var numberJobsAfter = Object.keys(printjobs).length;\n    var deletedJobs = numberJobsBefore - numberJobsAfter;\n    \n    node.warn(deletedJobs + \" printjobs with status '\" + status + \"' have been deleted.\");\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 1160,
        "wires": [
            [
                "e729b6ed.e56d68"
            ]
        ]
    },
    {
        "id": "b6ceb93f.a8f0f8",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "/controller/websocket",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1440,
        "wires": [
            [
                "4353f1da.249af"
            ]
        ]
    },
    {
        "id": "4353f1da.249af",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "read wesocket status",
        "func": "// prepare result\nmsg.payload = {\n    status : flow.get(\"websocket\")\n};\n\n\n// return message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "8ca50e30.ad45f"
            ]
        ]
    },
    {
        "id": "8ca50e30.ad45f",
        "type": "http response",
        "z": "d4af305b.2ea44",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1440,
        "wires": []
    },
    {
        "id": "75abe28e.88b82c",
        "type": "http in",
        "z": "d4af305b.2ea44",
        "name": "",
        "url": "*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 1680,
        "wires": [
            [
                "6540c97b.74e5d8"
            ]
        ]
    },
    {
        "id": "ab781dee.626f6",
        "type": "function",
        "z": "d4af305b.2ea44",
        "name": "Flow: imposeSheet (xjdf)",
        "func": "const request = context.global.get('REQUEST');\nconst path = context.global.get('PATH');\nconst fs = context.global.get('FS');\nconst pb = context.global.get('PRETTY_BYTES');\nconst unzipper = context.global.get('UNZIPPER');\nvar receivedPrintJobs = context.global.get('CACHE_RECEIVED_PRINTJOBS');\n\n// define request options\nvar options = {\n    method: 'POST',\n    url: env.get(\"IMPOSITION_URL\") + '/impose/sheet',\n    body: msg.gangJobEventXml,\n}\n\n// execute request\n\nrequest(options)\n    .on('error', function(err) {\n        node.error(\"Unable to impose sheet '\" + msg.sheetId + \"'. Reason: \" + JSON.stringify(err));\n        \n        receivedPrintJobs[msg.sheetId].status = \"error\";\n        receivedPrintJobs[msg.sheetId].audit.push({\n            type : \"error\",\n            on   : Date.now(),\n            msg  : \"Unable to impose sheet.\"\n        });\n    })\n    .pipe(unzipper.Parse())\n    .on('entry', function (entry) {\n        const fileName = entry.path;\n        const targetPath = path.join(msg.sheetDirectory, path.basename(fileName));\n        entry.pipe(fs.createWriteStream(targetPath));\n        receivedPrintJobs[msg.sheetId].audit.push({\n            type : \"info\",\n            on   : Date.now(),\n            msg  : \"Wrote file \" + path.basename(fileName) + \".\"\n        });        \n    })\n    .on('finish', () => {\n        \n        receivedPrintJobs[msg.sheetId].audit.push({\n            type : \"info\",\n            on   : Date.now(),\n            msg  : \"Sheet imposition finished.\"\n        });\n        \n        if(receivedPrintJobs[msg.sheetId].status === \"pending\"){\n            receivedPrintJobs[msg.sheetId].status = \"success\";\n        }\n        receivedPrintJobs[msg.sheetId].audit.push({\n            type : \"info\",\n            on   : Date.now() + 1,\n            msg  : \"finished.\"\n        });\n\n        node.send(msg);\n    });\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2210,
        "y": 420,
        "wires": [
            []
        ]
    }
]